--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Stratix II" DSP_BLOCK_BALANCING="Auto" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=4 LPM_WIDTHB=4 LPM_WIDTHP=8 MAXIMIZE_SPEED=5 aclr clken clock dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 9.1 cbx_cycloneii 2009:10:21:21:22:16:SJ cbx_lpm_add_sub 2009:10:21:21:22:16:SJ cbx_lpm_mult 2009:10:21:21:22:16:SJ cbx_mgl 2009:10:21:21:37:49:SJ cbx_padd 2009:10:21:21:22:16:SJ cbx_stratix 2009:10:21:21:22:16:SJ cbx_stratixii 2009:10:21:21:22:16:SJ cbx_util_mgl 2009:10:21:21:22:16:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 24 reg 12 
OPTIONS ALTERA_INTERNAL_OPTION = "{-to dffe10} POWER_UP_LEVEL=LOW;{-to dffe11} POWER_UP_LEVEL=LOW;{-to dffe12} POWER_UP_LEVEL=LOW;{-to dffe13} POWER_UP_LEVEL=LOW;{-to dffe2} POWER_UP_LEVEL=LOW;{-to dffe3} POWER_UP_LEVEL=LOW;{-to dffe4} POWER_UP_LEVEL=LOW;{-to dffe5} POWER_UP_LEVEL=LOW;{-to dffe6} POWER_UP_LEVEL=LOW;{-to dffe7} POWER_UP_LEVEL=LOW;{-to dffe8} POWER_UP_LEVEL=LOW;{-to dffe9} POWER_UP_LEVEL=LOW";

SUBDESIGN mult_kkt
( 
	aclr	:	input;
	clken	:	input;
	clock	:	input;
	dataa[3..0]	:	input;
	datab[3..0]	:	input;
	result[7..0]	:	output;
) 
VARIABLE
	add14_result[6..0]	:	WIRE;
	dffe10 : dffe
		WITH (
			power_up = "low"
		);
	dffe11 : dffe
		WITH (
			power_up = "low"
		);
	dffe12 : dffe
		WITH (
			power_up = "low"
		);
	dffe13 : dffe
		WITH (
			power_up = "low"
		);
	dffe2 : dffe
		WITH (
			power_up = "low"
		);
	dffe3 : dffe
		WITH (
			power_up = "low"
		);
	dffe4 : dffe
		WITH (
			power_up = "low"
		);
	dffe5 : dffe
		WITH (
			power_up = "low"
		);
	dffe6 : dffe
		WITH (
			power_up = "low"
		);
	dffe7 : dffe
		WITH (
			power_up = "low"
		);
	dffe8 : dffe
		WITH (
			power_up = "low"
		);
	dffe9 : dffe
		WITH (
			power_up = "low"
		);
	sum_adder1aa_0_dataa[4..0]	:	WIRE;
	sum_adder1aa_0_datab[4..0]	:	WIRE;
	sum_adder1aa_0_result[4..0]	:	WIRE;
	sum_adder1aa_1_dataa[4..0]	:	WIRE;
	sum_adder1aa_1_datab[4..0]	:	WIRE;
	sum_adder1aa_1_result[4..0]	:	WIRE;
	sft15a[6..0] : soft;
	sft16a[6..0] : soft;
	sft17a[6..0] : soft;
	sft18a[6..0] : soft;
	dataa_node[3..0]	: WIRE;
	datab_node[3..0]	: WIRE;
	final_result_node[7..0]	: WIRE;
	w107w[8..0]	: WIRE;
	w81w	: WIRE;
	w_decoder_node9w[15..0]	: WIRE;
	w_le_datab_node8w[3..0]	: WIRE;
	w_sum_node10w[11..0]	: WIRE;

BEGIN 
	add14_result[] = sft15a[].out + sft16a[].out + sft17a[].out;
	dffe10.clk = clock;
	dffe10.clrn = (! aclr);
	dffe10.d = w_sum_node10w[5..5];
	dffe10.ena = clken;
	dffe11.clk = clock;
	dffe11.clrn = (! aclr);
	dffe11.d = w_sum_node10w[9..9];
	dffe11.ena = clken;
	dffe12.clk = clock;
	dffe12.clrn = (! aclr);
	dffe12.d = w_sum_node10w[10..10];
	dffe12.ena = clken;
	dffe13.clk = clock;
	dffe13.clrn = (! aclr);
	dffe13.d = w_sum_node10w[11..11];
	dffe13.ena = clken;
	dffe2.clk = clock;
	dffe2.clrn = (! aclr);
	dffe2.d = w_sum_node10w[0..0];
	dffe2.ena = clken;
	dffe3.clk = clock;
	dffe3.clrn = (! aclr);
	dffe3.d = w_sum_node10w[1..1];
	dffe3.ena = clken;
	dffe4.clk = clock;
	dffe4.clrn = (! aclr);
	dffe4.d = w_sum_node10w[2..2];
	dffe4.ena = clken;
	dffe5.clk = clock;
	dffe5.clrn = (! aclr);
	dffe5.d = w_sum_node10w[6..6];
	dffe5.ena = clken;
	dffe6.clk = clock;
	dffe6.clrn = (! aclr);
	dffe6.d = w_sum_node10w[3..3];
	dffe6.ena = clken;
	dffe7.clk = clock;
	dffe7.clrn = (! aclr);
	dffe7.d = w_sum_node10w[7..7];
	dffe7.ena = clken;
	dffe8.clk = clock;
	dffe8.clrn = (! aclr);
	dffe8.d = w_sum_node10w[4..4];
	dffe8.ena = clken;
	dffe9.clk = clock;
	dffe9.clrn = (! aclr);
	dffe9.d = w_sum_node10w[8..8];
	dffe9.ena = clken;
	sum_adder1aa_0_result[] = sum_adder1aa_0_dataa[] + sum_adder1aa_0_datab[];
	sum_adder1aa_0_dataa[] = ( B"0", w_decoder_node9w[7..4]);
	sum_adder1aa_0_datab[] = ( B"0", B"0", w_decoder_node9w[3..1]);
	sum_adder1aa_1_result[] = sum_adder1aa_1_dataa[] + sum_adder1aa_1_datab[];
	sum_adder1aa_1_dataa[] = ( B"0", w_decoder_node9w[15..12]);
	sum_adder1aa_1_datab[] = ( B"0", B"0", w_decoder_node9w[11..9]);
	sft15a[].in = ( w81w, ( dffe13.q, ( dffe12.q, ( dffe10.q, ( dffe8.q, ( dffe6.q, dffe4.q))))));
	sft16a[].in = ( w81w, ( w81w, ( w81w, ( dffe11.q, ( dffe9.q, ( dffe7.q, dffe5.q))))));
	sft17a[].in = ( w81w, ( w81w, ( w81w, ( w81w, ( w81w, ( w81w, w81w))))));
	sft18a[].in = add14_result[];
	dataa_node[] = ( dataa[3..0]);
	datab_node[] = ( datab[3..0]);
	final_result_node[] = ( w107w[7..0]);
	result[] = ( final_result_node[7..0]);
	w107w[] = ( sft18a[6..5].out, sft18a[4..3].out, sft18a[2..1].out, sft18a[0..0].out, dffe3.q, dffe2.q);
	w81w = B"0";
	w_decoder_node9w[] = ( (( dataa_node[3..0]) & w_le_datab_node8w[3..3]), (( dataa_node[3..0]) & w_le_datab_node8w[2..2]), (( dataa_node[3..0]) & w_le_datab_node8w[1..1]), (( dataa_node[3..0]) & w_le_datab_node8w[0..0]));
	w_le_datab_node8w[] = ( datab_node[3..0]);
	w_sum_node10w[] = ( sum_adder1aa_1_result[], w_decoder_node9w[8..8], sum_adder1aa_0_result[], w_decoder_node9w[0..0]);
END;
--VALID FILE
